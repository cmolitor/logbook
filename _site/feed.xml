<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Logbuch</title>
    <description>Berichte über manche Dinge, die ich tue.</description>
    <link>http://localhost:4000/logbook/</link>
    <atom:link href="http://localhost:4000/logbook/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Wed, 06 Mar 2019 06:41:27 +0100</pubDate>
    <lastBuildDate>Wed, 06 Mar 2019 06:41:27 +0100</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>Building an Agtech prototpye</title>
        <description>

= Experience on building an IoT prototype for an agtech use case using the Redbear/Particle.io platform in combination with Node-red

Since a while I am interested in the internet of things and possible applications leveraging the underlying paradigm of connecting a variety of devices and sensors to the internet.
Due to my studies and my work as a researcher I gained some experience programming some applications and involving communication between simulators running on different platforms but also involving the RaspberryPi.

Thus, it was clear to me that I had to back the Reabear Kickstarter campaign, as the initiators promised with the Redbear Duo a poweful device with various communciation interfaces and yet easy to program.

However, as the funding of the campaign was succesful and I received the hardware after a while, I was lacking a specific use case. Thus, the hardware was sitting on my desktop waiting for an application. This is due to the situation that I rather motivate myself to build something kind of useful with a real function instead of building some blinking leds in combination with a button you can push.

== Finding my motivating use case

Thus, I needed to find a motivating use case. I found it, actually without actively looking for it, when I was visiting my parents which are running a diary. After having breakfast and sitting at a table with my father, he told me that he has to go back to the barn to open the gates.
Asking what gates and why he used them, he told me that although he has a fully autonomous milking robot, he as to lock some cows in an area whcih they can only leave by passing through the robot.

Excursion: In general the concept of the farm is that the cows can walk around freely in the barn and visit the milking robot as they wish. And almost all cows do visit the robot to be milked. However, there are a few cows which need a little push to visit the robot. This might be due to that they are new at the farm and don’t know the system yet or that they are sick.

##

sudo iptables -t nat -A PREROUTING -p tcp –dport 80 -j REDIRECT –to-port 443

iptables -t nat -L –line-numbers

Delete routin in line number x (here: 1)
iptables -t nat -D PREROUTING 1

get certificate (port 80 has to work for temporary webserver)
sudo certbot certonly
</description>
        <pubDate>Sun, 17 Feb 2019 00:00:00 +0100</pubDate>
        <link>http://localhost:4000/logbook/report/2019/02/17/Finding-and-building-an-agtech-use-case-using-the-Redbear-Duo-IoT-board/</link>
        <guid isPermaLink="true">http://localhost:4000/logbook/report/2019/02/17/Finding-and-building-an-agtech-use-case-using-the-Redbear-Duo-IoT-board/</guid>
        
        <category>AgTech</category>
        
        <category>Redbear</category>
        
        
        <category>report</category>
        
      </item>
    
      <item>
        <title>Changing Wifi credentials of Redbear Duo IoT board</title>
        <description>

At some point I had to change the Wifi credentials of my Redbear Duo board. Following the official instructions at https://github.com/redbear/Duo/blob/master/docs/out_of_box_experience.md I was not able to change the credentials with the Android app. Probably as the app is not anymore maintained.

Thus, I followed the instructions to use a USB connection and the terminal on macOS to set the Wifi credentials.

Those were the steps:

1) Connect the Redbear Duo with the USB cable to my MacBook

2) Push the setup button at the Redbear Duo for at least ten seconds, until it starts flashing very fast. After around three seconds the blue led starts flashing and the Redbear Duo is in Listening mode, but in order to reset the wifi credentials you have to press the button longer until the blue led starts flashing very fast.

3) Search and connect to Redbear Duo:

# search for devices:
ls /dev/tty.usbmodem*
# connect to device
screen /dev/tty.usbmodemXXXXX


4) use commands: i: show id, v: show version and w: setup wifi

5) Done!
</description>
        <pubDate>Thu, 23 Aug 2018 00:00:00 +0200</pubDate>
        <link>http://localhost:4000/logbook/report/2018/08/23/Changing-Wifi-credentials-of-Redbear-Duo-IoT-board/</link>
        <guid isPermaLink="true">http://localhost:4000/logbook/report/2018/08/23/Changing-Wifi-credentials-of-Redbear-Duo-IoT-board/</guid>
        
        <category>RedBear</category>
        
        <category>IoT</category>
        
        <category>CheatSheet</category>
        
        
        <category>report</category>
        
      </item>
    
      <item>
        <title>Creating images from a Raspberry Pi</title>
        <description>

== List all mounted devices:
diskutil list

Extract the information which diskX is the one of the SD card.

== Unmount device:
diskutil unmountDisk /dev/diskX

== Create Image:
sudo dd if=/dev/diskX of=/Users/.../NameOfImage.img bs=1m

== Restore image to device:
sudo dd bs=1m if=/Users/.../NameOfImage.img of=/dev/diskX

== Compress image:
gzip -fk /Users/.../NameOfImage.img
</description>
        <pubDate>Sun, 26 Nov 2017 00:00:00 +0100</pubDate>
        <link>http://localhost:4000/logbook/report/2017/11/26/Some-notes-on-creating-an-image-from-a-Raspberry-Pi-SD-card-and-restoring-it/</link>
        <guid isPermaLink="true">http://localhost:4000/logbook/report/2017/11/26/Some-notes-on-creating-an-image-from-a-Raspberry-Pi-SD-card-and-restoring-it/</guid>
        
        <category>RaspberryPi</category>
        
        <category>CheatSheet</category>
        
        
        <category>report</category>
        
      </item>
    
      <item>
        <title>Küchenzeile mit IKEA Kallax</title>
        <description>

Küchenzeile mit IKEA Kallax

In der Küche war der Stauraum sowie die Ablagefläche etwas knapp, daher habe ich überlegt wie kostengünstig Stauraum, Ablagefläche und ein Platz für die Mikrowelle geschaffen werden konnte.

Nach verschiedenen Überlegeungen habe ich mich entschieden eine passende Lösung basierend auf dem IKEA Kallax Regal zu schaffen.

Zuerst kurz ein Foto der fertigen Lösung, die als Inspiration dienen kann. Weiter unten dann eine kurze Beschreibung der Kniffe und Anpassungen, die nötig waren, um mit einfachen IKEA Teilen die Lösung umzusetzen.
Die Teileliste mit Links findet sich am Ende des Artikels.

Die fertige Lösung sieht folgendermaßen aus:



Unterschrank

Der Unterschrank besteht aus einem 2x2 IKEA Kallax Regal in weiß, einem IKEA ELVARLI (80x51cm) Regalboden sowie vier Möbelfußen (Möbelfuß Set Alpha 80 - 150 mm).

Zuerst wurde das IKEA Kallax Regal aufgebaut, wobei im Inneren nur das durchgehende Regalbrett und eins der “halben” Regalbretter montiert wurden. Somit entstand ein großes Fach für die Mikrowelle.

Danach wurden die Möbelfüße angeschraubt. Hier wurden einfach die Schrauben des IKEA Regals genutzt. Damit diese durch die Bohrlöcher der Möbelfüße passten, mussten die Bohrlöcher etwas aufgebohrt werden. Die Möbelfüße sind somit nur mit einer Schraube befestigt, was sich aber als vollkommen ausreichend herausgestellt hat.




Zum Schluß wurde die Arbeitsplatte bestehend aus einem IKEA ELVARLI (80x51cm) Regalboden angebracht. Diese wurde einfach aufgelegt und von unten durch die Regelwand mit vier Schrauben befestigt. Absolut ausreichend.



Die Türen für zwei Fächer wurden entsprechend der IKEA Anleitung und ohne Anpassungen montiert.

Das fertige Ergebnis sieht dann folgendermaßen aus:



Oberschrank

Für den Oberschrank wurde ein IKEA Kallax 3x1 Regal in weiß gewählt. Um das Regal sicher an die Wand aufzuhängen, habe ich mich entschieden in allen vier äußeren Ecken des Regals sogenannte Bettbeschläge anzubringen. Die Bettbeschläge wurden mittels Schrauben an den Stellen angebracht, die für den IKEA Kippschutz vorgesehen sind. Hierzu mussten die Bettbeschläge an den entsprechenden Stellen gebohrt werden. Zusätzlich wurden weitere Schrauben verwendet. Hier hat sich aber herausgestellt, dass andere Bohrstellen, als die für den Kippschutz vorgesehenen, nicht wirklich halten. Daher sind die hier verwendeten Bettbeschläge im Nachhinein betrachtet etwas überdimensioniert. Etwas kleinere Bettbeschläge oder einfache Winkel wären wohl auch ausreichend.



Nachdem die Bettbeschläge angebracht waren, konnte das Regal an der Wand montiert werden. Festhalten, Bohrstellen markieren, Regal absetzen und Löcher in die Wand Bohren. Hier wurden 10mm Köcher für SX10 Dübe gebohrt. Die verwendeten Sechskant-Schrauben für die Befestigung des Regals sind 8x80mm. Unterlagscheiben wären zu empfehlen.

So sah das Regal nach der Montage aus:



Der Einbau der Türen für die beiden außenliegenden Fächer war nun etwas aufwändiger, da die Bettbeschläge etwas im Weg sind. Damit die Einsätze passen, mussten entsprechende Aussparungen gefeilt werden und auch Aussparungen für die Wandschrauben erstellt werden.





Montierter Einsatz mit Aussparungen:



Nach dem Einbau der Türen sieht das Ganze folgendermaßen aus:





Zusammenfassung

Der Aufbau des Unterschranks war sehr einfach und ging schnell von der Hand. Der Oberschrank mit den Bettbeschlägen als sichere Befestigungsmöglichkeit hat einen gewissen Aufwand bedeutet (~2 Stunden).

Für die Durchführung wurden eine Bohrmaschine mit entsprechenden Bohrern und verschiedene Holzfeilen verwendet. Zum Anziehen der Sechskant-Schrauben wurde eine Ratsche verwendet.

Links

Möbelfüße:
http://www.ebay.de/itm/Mobelfus-Set-Alpha-80-150-mm-Mobelfuse-Sockelfuse-Schrankfuse-Bettfus-Sofafus/162090571638?hash=item25bd59d776:m:mop3084FJWFSQZ7JJ5-0i-Q

Regalboden, ELVARLI, IKEA:
http://www.ikea.com/de/de/catalog/products/80296291/

Regal, Kallax 2x2, IKEA:
http://www.ikea.com/de/de/catalog/products/20275814/

Regal, Kallax 3x1, IKEA:
http://www.ikea.com/de/de/catalog/products/30372188/

Regaleinsatz mit Tür, schwarz, IKEA:
http://www.ikea.com/de/de/catalog/products/20278167/#/60278170

Bettbeschläge:
http://www.ebay.de/itm/361207035435

</description>
        <pubDate>Mon, 30 Oct 2017 00:00:00 +0100</pubDate>
        <link>http://localhost:4000/logbook/report/2017/10/30/Kuchenzeile-mit-IKEA-Kallax/</link>
        <guid isPermaLink="true">http://localhost:4000/logbook/report/2017/10/30/Kuchenzeile-mit-IKEA-Kallax/</guid>
        
        <category>IKEA</category>
        
        
        <category>report</category>
        
      </item>
    
      <item>
        <title>Setting up a web app project using Google Firebase and react.js</title>
        <description>

= Setting up a web app project using Google Firebase and react.js

When I looked for a tutorial how to setup a Google Firebase project using react.js, I could not find many tutorials. 
Maybe because it is trivial if you are familiar with Firebase and/or react.js.

Basically, what you need to do to setup Google Firebase and react.js are just two steps:


  Create a react.js application using


create-react-ap nameOfApp



  Initialize a firebase project within the folder of your react.js application with some specific settings


Here, I assume that you have node.js already installed on your machine. I am running everything on macOS.

In the following I will describe the two steps in more detail.

== 1. Setting up a react.js project

I found the following tutorial really helpful to create a first react.js app. Thus, instead of repeating it here, I recommend to follow the guide:

https://medium.com/@diamondgfx/learning-react-with-create-react-app-part-1-a12e1833fdc

However, at some point I had an issue and had to install:

npm install --save react-router-dom


But the everything was fine.

Important commands:


  
    npm start for starting your app on your local machine
  
  
    npm run build to build optimized code which will be put in the folder build
  


== 2. Setting up Google Firebase project

The following steps have to be executed to setup a Google Firebase project. The source of this description can be found here:
https://medium.com/@larrysigo/hosting-your-react-app-with-firebase-hosting-add1fa08c214

First you gave to install the firebase-tools and initialize firebase in your project.

Install firebase tools by npm install -g firebase-tools which install firebase globally so it can be used in the ternimal.

Second you have to initialize the firebase project in your project folder. Navigate there in your terminal and enter the command firebase login, then login and run the command firebase init`.

Follow the steps on the screen:


  Select the Firebase features you want to use. Here, I chose Database, Hosting and Cloud functions.
  Firebase command-line interface will pull up your list of Firebase projects, where you can then choose the corresponding project using the up and down keys. Here all projects created in the frírebase online frontend will be listed.
  Keep the default for the Database Rules file name and just press enter.
  Pay attention to the question about public directory, which is the directory that will be deployed and served by Firebase. In our case it is build, which is the folder where our production build is located. Type build and proceed. If you make a istake here, you can change the public directory in the file firebase.json
  Firebase will ask you if you want the app to be configured as a single-page app. By default it is “no” — in our case, we could really benefit from the configuration, so we’ll type “y” and press enter. Later on you’ll be able to use react-router and the URLs will just work.
  Firebase will warn us that we already have “build/index.html,” which we don’t want to be overwritten. Type “n” and press enter to keep our own “index.html,” generated by our build process earlier.


== Further material:


  Alternative/similar guide, I did not try yet: https://www.youtube.com/watch?v=mwNATxfUsgI

</description>
        <pubDate>Sat, 26 Aug 2017 00:00:00 +0200</pubDate>
        <link>http://localhost:4000/logbook/report/2017/08/26/Setting-up-a-web-app-project-using-Google-Firebase-and-reactjs/</link>
        <guid isPermaLink="true">http://localhost:4000/logbook/report/2017/08/26/Setting-up-a-web-app-project-using-Google-Firebase-and-reactjs/</guid>
        
        <category>Firebase</category>
        
        <category>react.js</category>
        
        
        <category>report</category>
        
      </item>
    
      <item>
        <title>Mein erster Blogeintrag</title>
        <description>

Mein erster Blogeintrag

Hier in diesem Blog werde ich über verschiedene technische Themen berichten, mit denen ich mich gerade beschäftige. Die Berichte dienen hauptsächlich zu meiner eigenen Dokumentation und können vielleicht auch für jemand anderen hilfreich sein.
</description>
        <pubDate>Thu, 24 Aug 2017 00:00:00 +0200</pubDate>
        <link>http://localhost:4000/logbook/report/2017/08/24/Mein-erster-Blogeintrag/</link>
        <guid isPermaLink="true">http://localhost:4000/logbook/report/2017/08/24/Mein-erster-Blogeintrag/</guid>
        
        
        <category>report</category>
        
      </item>
    
  </channel>
</rss>
