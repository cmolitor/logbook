{
  

    "report-2019-07-19-correcting-wrong-measurement-data-influxdb": {
      "title": "Adjusting measurement data in influxdb",
      "content"	 : "SummaryI wanted to adjust measurement data in my influxdb due to some wrong settings in the measurement device. The procedure to adjust the data is described in the following sections. However, after performing the adjustment, I realized that the adjustment is not suitable for all of the different measurement types I had in the database.BackgroundI was recording some measurement data from a Janitza energy meter using Node-RED, influxdb and grafana. After a while I noticed that the measurement data is not plausible. The only option was that the current transformer ratio was not set correct at the Janitza energy meter. And indeed the actual current transformer ratio was 250 and the parameter set at the energy meter was 150. After changing the parameter, the newly recorded data looked plausible.As I didn’t want to delete the recorded data (more than 6 month of data), I wanted to adjust the recorded data.However, my first attempt to do this, didn’t work out as expected. As I am writing this, I am still looking for a solution.ProcedureAs influxdb offers no option to adjust/manipulate the data, I thought of the following procedure:      Export data with the following command:influx_inspect export -datadir &quot;/var/lib/influxdb/data&quot; -waldir &quot;/var/lib/influxdb/wal&quot; -out &quot;smartfarm&quot; -database smartfarm -retention autogen    Manipulate data with a Python script: As an example the data looked the following way (excerpt):     E_real_con value=6.09633e+07 1542060000543464984 E_real_con value=6.10586e+07 1542146400564041196 E_real_con value=6.1149736e+07 1542232800588670399 E_real_con value=6.1245752e+07 1542319200593853720 E_real_con value=6.1333508e+07 1542405600602153330 E_real_con value=6.1419752e+07 1542492000604431684        I performed the following steps to manipulate the data:          Search and replace “value=”” with “”. So remove “value=”      Run the following Python script which basically multiplies the values with a correction factor:         import numpy as np  import pandas as pd data = pd.read_csv(&#39;smartfarm&#39;, sep=&quot; &quot;, header=8) data.columns = [&quot;measurement&quot;, &quot;value&quot;, &quot;timestamp&quot;] # Filter only relevant lines data_corrected = data[(data[&#39;timestamp&#39;]&amp;lt;1563012000000000000) &amp;amp; ((data[&#39;measurement&#39;]==&quot;P&quot;) | (data[&#39;measurement&#39;]==&quot;P1&quot;) | (data[&#39;measurement&#39;]==&quot;P2&quot;) | (data[&#39;measurement&#39;]==&quot;P3&quot;) | (data[&#39;measurement&#39;]==&quot;E_cap&quot;) | (data[&#39;measurement&#39;]==&quot;E_ind&quot;) | (data[&#39;measurement&#39;]==&quot;E_real_con&quot;) | (data[&#39;measurement&#39;]==&quot;E_real_del&quot;))] # Scale data  data_corrected.value *=5.0/3.0 data_corrected.to_csv(&quot;smartfarm_processed&quot;, sep=&#39; &#39;, encoding=&#39;utf-8&#39;, index=False)                    Add “value=” back to the manipulated data file with search and replace “E_real_con “ by “E_real_con value=”.        Put data back to influxdb    curl -i -XPOST &quot;http://localhost:8086/write?db=smartfarm&quot; --data-binary @smartfarm_processed      Influxdb “updates” the value if the timestamp is identical.ResultActually the four power values (every phase and sum) have been adjusted properly and data looks fine. However, the energy values are cumulative values and scaling of these values caused the following issue: The last cumulative energy value recorded before changing the current transformer ratio has been changed to the value as if the current transformer ratio has been set properly from the beginning. But the first reading of these values after correcting the current transformer ratio still starts form the value stored in the energy meter which canot be adjusted. As result, the cumulative energy value dropped at the time the current transformer ratio was changed.Why haven’t I thought about this before?Actually, I never display the cumulative energy value but the daily/monthly or annualy delta which is calculated by the query in Grafana. Thus, I saw the problem after putting the data back to the database and looking at my data in Grafana dashboard. Scaling the daily/monthly or annualy delta values by the correction factor would have been fine.On the day the current transformer ratio has been adjusted, the displayed data was inverted and with high absolute values.Possible other solutions to try out      Continuous query in influxdb    The idea is to copy the orginal data from the backup back to the database and calculate the daily/montly/yearly values using continuous query where I multiply the values before changing the current transformer ratio with the correction factor.        Add an offset to the energy meter values    The offset would be the delta between the corrected energy meter value and the value still stored in the energy meter Modbus register.  ",
      "url": "/logbook/report/2019/07/19/Correcting-wrong-measurement-data-influxdb/",
      "author": "Christoph Molitor",
      "categories": "report"
    }
    ,
  

    "report-2019-05-31-finding-and-building-an-agtech-use-case-using-the-redbear-duo-iot-board": {
      "title": "A smart gate for a milking robot",
      "content"	 : "Lesson’s learned  Observing the user/customer doing a task is more important than just asking him about it  Particle.io is a great platform for building prototypes and small series devicesBackgroundSince a while I am interested in the internet of things and possible applications leveraging the underlying paradigm of connecting a variety of devices and sensors to the internet.Due to my studies and my work as a researcher I gained experience programming some applications and involving communication between simulators running on different platforms. Futhermore, I had gained experience with the Raspberry Pi due to several work and hobbyist projects.Thus, it was clear to me that I had to back the Redbear Kickstarter campaign, as the initiators promised with the Redbear Duo a powerful device with various communciation interfaces and yet easy to program.However, as the funding of the campaign was successful and I received the hardware in August 2016, I was lacking a specific use case. Thus, the hardware was sitting on my desktop waiting for an application for two years. This is due to the situation that I rather motivate myself to build something kind of useful with a real function instead of building some blinking leds in combination with a push button.Finding my motivating use caseThus, I needed to find a motivating use case. I found it, when I was visiting my parents which are running a diary. After having breakfast and sitting at a table with my father, he told me that he has to go back to the cowshed to open the gates.Asking what gates and why he used them, he told me that although he has a fully autonomous milking robot, he as to lock some cows in an area which they can only leave by passing through the robot.Excursion: In general the concept of the farm is that the cows can walk around freely in the barn and visit the milking robot as they wish. And almost all cows do visit the robot to be milked. However, there are a few cows which need a little push to visit the robot. This might be due to that they are new at the farm and don&#39;t know the system yet or that they have a bad day;-).I started to wonder why the fully automated milking robot does not send a notification when all the cows passed the robot. Actually, the milking robot has the functionality to send notifications or make calls, when there is something going wrong. However, here it does not know how many cows have been separated and need to pass, so it cannot send a notification.So I started thinking that the operator (here my dad) needs a possibility to set (2) a specific number of cows which have to pass the robot and then receives a notification (3) when the cows have passed the robot (1).The solution which came to my mind to solve the three sub tasks (1,2,3), was the following:1) Sensing: The milking robot has a entrance gate and an exit gate. When the entrance gate opens the cow can enter the cabin. As soon as the cow entered the cabin, the entrance gate closes again. After finishing the milking, the exit gate opens, the cow can leave the cabin and the exit gate closes again while the entrance gate opens again. So my thought was to put a door or gate contact at one of the gates and count the gate “events”.2) User interface: Often the first thing which comes to my mind is a webinterface or an app to set parameters or set in this specific case a number of cows. However, in this specific evironment, a farm, often gloves are worn or fingers might be wet. Thus, I decided to put a rotary knob and a small display to see the set value. Voice control could be also an option but the environment is also rather noisy.3) Notification: After the set number of cows has passed the milking robot, the operator, e.g. my father, has to receive a notification, so they can go and open the gates. Here, the simplest solution is to send an e-mail which they can receive on their mobile or PC.This is more or less the sketch of the solution which I planned to realize. Furthermore, I thought that the Redbear Duo could be a good device to build this solution. The steps to implement the solution are described in detail in the following sections.Building a functional prototype on a breadboardThe first step was to connect and setup the RedBear Duo. Here, I followed the official instructions which can be found at Github. In the meantime RedBear has become a part of Particle.io, thus the RedBear App seems to not work anymore. However, you can also use a serial connection and a terminal to setup the device.Although the RedBear Duo can be used withput the Particle.io platform, I decided to register at Particle.io in order to try out the platform, mainly the Particle Web IDE.After setting up a Particle.io account, I could claim my RedBear Duo device on the Particle.io platform.The Particle Web IDE allows you to manage your devices, projects and used libraries easily. See here some screen shots.After setting up the RedBear Duo and the particle Web IDE, I started to develop the code while adding the external hardware (here: display, button and rotary knob) one after the other.The latest version of the code, I developed can be found here at Github.The final breadboard setup looks like depicted here:In accordance with the previous described substasks, I proceeded the following way:      Sensing: Started with a push button as event trigger, later replaced by door contact    At the beginning for getting started I used a typical push button to emulate “gate opened” events. The push button has been connected to the RedBear Duo digital input pin using a voltage divider circuit. Later on, after finishing the rest of the whole setup, I replaced the push button with a door contact which is also used in the deployed setup.    I got the following door contact made of stainless steel: Door contact        User interface: rotary knob and display    As user interface, I decided to use a display to visualize the set values and the current status. Furthermore, a rotary knob has been used to set the values (here number of cows) of the device.                  Display: As display I used a 4 digit 7 segment display which is typically used for clocks. I got mine here at Aliexpress.        The library for controlling the display is already available in the Particle Web IDE, just search in the library tab for “TM1637Display”.        However, I used a slightly changed library from Github which allowed better control of the colon. Instead of showing hours and minutes, I used the left two digits of the display (hours display) to show current values and the right two digits of the display (minutes display) to show set values. More details can be found further down.                    Rotary knob: In order to set the values of the device, I decided to use a rotary knob which can be also used with gloves and is rather insensitive to dirt and humidity.              The user interaction through the user interface follows the following description: At startup the device displays 0:0. While the user turns the rotary knob, the left side of the display (hour display) is updated according to the rotation, eg. to 5:0. In order to set the displayed value as value to count down, the user pushes the rotary knob. On the push of the rotary knob, the set value, here 5 is displayed at the right side of the display (minutes display) while the left side (hour display) is set back to 0.    Form this moment on, the device also counts the gate open events starting from zero and displays the current number of gate open events on the left side (hour display).            Notification    The last task which had to be done in order to provide a valuable solution is to send a notification to the user/operator that all the cows have passed the milking robot. Here I decided that the RedBear Duo sends an MQTT notification to a Node-RED flow which triggers an e-mail to specified recipients. The MQTT message also contains the number of set cows which is used in the e-mail (see screenshot of Node-RED flow).    The Node-RED flow is depicted here: For triggering the e-mail a specific topic has to be triggered. Furthermore, the RedBear Duo client has a unique user and password for connecting to the MQTT server.    Here, I was using my already existing Node-RED setup. However, also the use of a service like IFTTT or others could be an alternative solution.       Installing all components in a deployable caseAfter developing a functional setup, comprising hardware and software, on a breadboard, a deployable setup had to be developed.Deployable setup here means that all the hardare is installed and mounted in way that it can used in a harsh environment like a diary farm. In order to install the hardware, I ordered the following case.Within this case, I mounted a stripboard as base plate to hold the RedBear RBLink which serves as break out board for the RedBear Duo. Furthermore, the voltage divider for the input of the door contact is soldered on this stripboard.Furthermore, I drilled three holes in the case. One for mounting the wifi antenna, one for a 4-pole connector to provide connection for the power supply and the door contact and the third hole for mounting the rotary knob. As connector, I used the following connector. However, for the next time I would prefer a different type of connector which provides an easier way to connect cables to.The 4 segment display was fixed to the transparent cover of the case with a transparent double-sided tape.The fully mounted case can be seen in the pictures and video below.DeploymentAfter mounting all the components in the deployable case, it is time to put the whole device in the field.First the door contacts are mounted on the gate through which the cows leave the milking robot. See the picture below.After this the case with user interface consisting of the display and the rotary knob is mounted at the housing of the milking robot where it can be easily reached by the user.The following video demonstartes the setting of the number of cows.Long term operationAs I am writing finally this report and documentation the “Lely Smartgate”, as I call the device, is already in stable operation since 5 month. So far the device is running really stable and did not show any malfunction so far. The detection of the “gate open” events works so far without any reported error.Once, I updated the software, in order to add the number of cows which have past the gate into the e-mail. The update of the software worked seemlessly through the Particle.io WebIDE.Furthermore, the device is actually really used on a daily basis and provides a real use for my dad.Conclusion and lesson learned  Goal was to build a useful use case using the RedBear Duo.  Using the RedBear Duo was fun. As it is depreceated, I hope the Particle Photon is similar to use for the next project.  Programming the RedBear Duo via the Particle WebIDE works like a charm and is really fun.  While building the device, I once showed it to my dad and he wasn’t sure if it is really useful. However, now the device is frequently used and provides value, thus, the lesson learned is:          prepare better demos      don’t ask user what he wants, better observe how he does certain tasks and think what could be improved      Alternatives and other solutions and todos  get data from milking robot instead of installing a door contact  use IFTTT instead of Node-RED instance  ask other robot users if this feature would be interesting for them",
      "url": "/logbook/report/2019/05/31/Finding-and-building-an-agtech-use-case-using-the-Redbear-Duo-IoT-board/",
      "author": "Christoph Molitor",
      "categories": "report"
    }
    ,
  

    "report-2019-05-05-configuring-adeunis-field-tester-using-macos-coolterm": {
      "title": "How to setup the Adeunis Field Test Device under macOS",
      "content"	 : "BackgroundLately I was testing the LoRaWAN coverage of our deployed gateways with an Adeunis Field Test Device. For the coverage test I wanted to change some settings of Adeunis Field Test Device. More specific: I wanted the device to send an Uplink message more frequently (default interval is 10 minutes).Looking for a manual to change the settings of the device, I found the following detailed device description (german) provided by Smartmakers.However, it took me a while to figure out how to configure the Adeunis Field Test Device using macOS and CoolTerm, as the Smartmaker description is for Windows systems. So here a short description how to do it on a Mac. Check out also the video demo below.General setupAs I am using a Mac, I found and used CoolTerm to connect via a serial connection with the Adeunis.I connected the Adeunis Field Test Device with an USB cable with my Mac.Steps to change settings of Adeunis Field Test DeviceHere a short description of the steps to change the settings of the Adeunis Field Test Device. Please see the video for details.      Connecting to Adeunis Field Test Device          Connect Adeunis Field Test Device via USB cable      Turn Adeunis Field Test Device on      Open CoolTerm      Connection (menu) -&amp;gt; Options -&amp;gt; if necessary: rescan      Set proper connection settings      Confirm with “OK”      Press “Connect”            After successful connection, you will receive some output on the CoolTerm terminal each time a LoRaWAN message is transmitted. You can transmit a message by pressing the physical button on the Adeunis Field Test Device.        Enter “Command Mode” to change settings of Adeunis Field Test Device    In order to change settings of the Adeunis Field Test Device, you have to enter the “Command mode (CM)”. Here, I got stuck as I did not know how to append “CR” and ”LF” to the raw hex command as described in the Smartmakers manual. Following steps worked:          Connection (menu) -&amp;gt; Send String      Select “Hex”      Enter “FF FF FF FF FF 2B 2B 2B”      Select “ASCII”      Hit “Enter” at the end of the command      Select “Hex”      Now you see that an “0D 0A” has been attached to the line. Actually, this is “CR” and ”LF”. So next time you can just enter it, instead of switching back to ASCII and hit “Enter”.      Press “Send”      CoolTerm should print “CM” in the terminal      Adeunis Field Test Device shows “CM” on the display.            Send further commands and change settings of Adeunis Field Test Device  Now, you can send for example the command “AT/V” in ASCII (don’t forget to hit enter (“CR” + “LF”) after the “AT/V” command) to read the version or “AT/S” in ASCII to read the settings. To change the sending interval use “ATS380=60” in ASCII to set the interval to 60 seconds.To leave the “command mode” send “AT0” in ASCII.Video demo to connect and change settings of Adeunis Field Test Device",
      "url": "/logbook/report/2019/05/05/Configuring-Adeunis-Field-Tester-using-macOS-CoolTerm/",
      "author": "Christoph Molitor",
      "categories": "report"
    }
    ,
  

    "report-2019-04-14-letsencrypt-grafana-routing": {
      "title": "Using SSL for Grafana",
      "content"	 : "Securing my Grafana dashboards with https using letsencrypt.orgInitial setupActually I followed the description of the following website (in german):Freifunk WinterbergThe procedure describes the setup of grafana using a SSL certificate provided by letsencrypt.orgRenewal of certificateOnce in while (I don’t remember the exact duration), you have to renew your certifcate by using the following command:sudo certbot certonlyRouting of incoming https traffic to grafana port (port 3000)In order to redirect the https traffic to the grafana port (port 3000), you have to configure the routing with the followig command, which redirects traffic at port 443 (https) to port 3000 (grafana).sudo iptables -t nat -A PREROUTING -p tcp --dport 443 -j REDIRECT --to-port 3000If you like to check your routing table, sue the following command:iptables -t nat -L --line-numbersIf you want to delete some set routing, e.g in line number 1, use the following command:iptables -t nat -D PREROUTING 1",
      "url": "/logbook/report/2019/04/14/Letsencrypt-Grafana-Routing/",
      "author": "Christoph Molitor",
      "categories": "report"
    }
    ,
  

    "report-2018-08-23-changing-wifi-credentials-of-redbear-duo-iot-board": {
      "title": "Changing Wifi credentials of Redbear Duo IoT board",
      "content"	 : "At some point I had to change the Wifi credentials of my Redbear Duo board. Following the official instructions, I was not able to change the credentials with the Android app. Probably as the app is not anymore maintained.Thus, I followed the instructions to use a USB connection and the terminal on macOS to set the Wifi credentials.Those were the steps:1) Connect the Redbear Duo with the USB cable to my MacBook2) Push the setup button at the Redbear Duo for at least ten seconds, until it starts flashing very fast. After around three seconds the blue led starts flashing and the Redbear Duo is in Listening mode, but in order to reset the wifi credentials you have to press the button longer until the blue led starts flashing very fast.3) Search and connect to Redbear Duo:search for devices:ls /dev/tty.usbmodem*connect to device:screen /dev/tty.usbmodemXXXXX4) use commands:i: show idv: show versionw: setup wifi5) Done!",
      "url": "/logbook/report/2018/08/23/Changing-Wifi-credentials-of-Redbear-Duo-IoT-board/",
      "author": "Christoph Molitor",
      "categories": "report"
    }
    ,
  

    "report-2017-11-26-some-notes-on-creating-an-image-from-a-raspberry-pi-sd-card-and-restoring-it": {
      "title": "Creating images from a Raspberry Pi",
      "content"	 : "      List all mounted devices:diskutil list    Extract the information which diskX is the one of the SD card.        Unmount device:diskutil unmountDisk /dev/diskX        Create Image:sudo dd if=/dev/diskX of=/Users/.../NameOfImage.img bs=1m        Restore image to device:sudo dd bs=1m if=/Users/.../NameOfImage.img of=/dev/diskX        Compress image:gzip -fk /Users/.../NameOfImage.img  ",
      "url": "/logbook/report/2017/11/26/Some-notes-on-creating-an-image-from-a-Raspberry-Pi-SD-card-and-restoring-it/",
      "author": "Christoph Molitor",
      "categories": "report"
    }
    ,
  

    "report-2017-10-30-kuchenzeile-mit-ikea-kallax": {
      "title": "Küchenzeile mit IKEA Kallax",
      "content"	 : "Küchenzeile mit IKEA KallaxIn der Küche war der Stauraum sowie die Ablagefläche etwas knapp, daher habe ich überlegt wie kostengünstig Stauraum, Ablagefläche und ein Platz für die Mikrowelle geschaffen werden konnte.Nach verschiedenen Überlegeungen habe ich mich entschieden eine passende Lösung basierend auf dem IKEA Kallax Regal zu schaffen.Zuerst kurz ein Foto der fertigen Lösung, die als Inspiration dienen kann. Weiter unten dann eine kurze Beschreibung der Kniffe und Anpassungen, die nötig waren, um mit einfachen IKEA Teilen die Lösung umzusetzen.Die Teileliste mit Links findet sich am Ende des Artikels.Die fertige Lösung sieht folgendermaßen aus:UnterschrankDer Unterschrank besteht aus einem 2x2 IKEA Kallax Regal in weiß, einem IKEA ELVARLI (80x51cm) Regalboden sowie vier Möbelfußen (Möbelfuß Set Alpha 80 - 150 mm).Zuerst wurde das IKEA Kallax Regal aufgebaut, wobei im Inneren nur das durchgehende Regalbrett und eins der “halben” Regalbretter montiert wurden. Somit entstand ein großes Fach für die Mikrowelle.Danach wurden die Möbelfüße angeschraubt. Hier wurden einfach die Schrauben des IKEA Regals genutzt. Damit diese durch die Bohrlöcher der Möbelfüße passten, mussten die Bohrlöcher etwas aufgebohrt werden. Die Möbelfüße sind somit nur mit einer Schraube befestigt, was sich aber als vollkommen ausreichend herausgestellt hat.Zum Schluß wurde die Arbeitsplatte bestehend aus einem IKEA ELVARLI (80x51cm) Regalboden angebracht. Diese wurde einfach aufgelegt und von unten durch die Regelwand mit vier Schrauben befestigt. Absolut ausreichend.Die Türen für zwei Fächer wurden entsprechend der IKEA Anleitung und ohne Anpassungen montiert.Das fertige Ergebnis sieht dann folgendermaßen aus:OberschrankFür den Oberschrank wurde ein IKEA Kallax 3x1 Regal in weiß gewählt. Um das Regal sicher an die Wand aufzuhängen, habe ich mich entschieden in allen vier äußeren Ecken des Regals sogenannte Bettbeschläge anzubringen. Die Bettbeschläge wurden mittels Schrauben an den Stellen angebracht, die für den IKEA Kippschutz vorgesehen sind. Hierzu mussten die Bettbeschläge an den entsprechenden Stellen gebohrt werden. Zusätzlich wurden weitere Schrauben verwendet. Hier hat sich aber herausgestellt, dass andere Bohrstellen, als die für den Kippschutz vorgesehenen, nicht wirklich halten. Daher sind die hier verwendeten Bettbeschläge im Nachhinein betrachtet etwas überdimensioniert. Etwas kleinere Bettbeschläge oder einfache Winkel wären wohl auch ausreichend.Nachdem die Bettbeschläge angebracht waren, konnte das Regal an der Wand montiert werden. Festhalten, Bohrstellen markieren, Regal absetzen und Löcher in die Wand Bohren. Hier wurden 10mm Köcher für SX10 Dübe gebohrt. Die verwendeten Sechskant-Schrauben für die Befestigung des Regals sind 8x80mm. Unterlagscheiben wären zu empfehlen.So sah das Regal nach der Montage aus:Der Einbau der Türen für die beiden außenliegenden Fächer war nun etwas aufwändiger, da die Bettbeschläge etwas im Weg sind. Damit die Einsätze passen, mussten entsprechende Aussparungen gefeilt werden und auch Aussparungen für die Wandschrauben erstellt werden.Montierter Einsatz mit Aussparungen:Nach dem Einbau der Türen sieht das Ganze folgendermaßen aus:ZusammenfassungDer Aufbau des Unterschranks war sehr einfach und ging schnell von der Hand. Der Oberschrank mit den Bettbeschlägen als sichere Befestigungsmöglichkeit hat einen gewissen Aufwand bedeutet (~2 Stunden).Für die Durchführung wurden eine Bohrmaschine mit entsprechenden Bohrern und verschiedene Holzfeilen verwendet. Zum Anziehen der Sechskant-Schrauben wurde eine Ratsche verwendet.LinksMöbelfüße:http://www.ebay.de/itm/Mobelfus-Set-Alpha-80-150-mm-Mobelfuse-Sockelfuse-Schrankfuse-Bettfus-Sofafus/162090571638?hash=item25bd59d776:m:mop3084FJWFSQZ7JJ5-0i-QRegalboden, ELVARLI, IKEA:http://www.ikea.com/de/de/catalog/products/80296291/Regal, Kallax 2x2, IKEA:http://www.ikea.com/de/de/catalog/products/20275814/Regal, Kallax 3x1, IKEA:http://www.ikea.com/de/de/catalog/products/30372188/Regaleinsatz mit Tür, schwarz, IKEA:http://www.ikea.com/de/de/catalog/products/20278167/#/60278170Bettbeschläge:http://www.ebay.de/itm/361207035435",
      "url": "/logbook/report/2017/10/30/Kuchenzeile-mit-IKEA-Kallax/",
      "author": "Christoph Molitor",
      "categories": "report"
    }
    ,
  

    "report-2017-08-26-setting-up-a-web-app-project-using-google-firebase-and-reactjs": {
      "title": "Setting up a web app project using Google Firebase and react.js",
      "content"	 : "Setting up a web app project using Google Firebase and react.jsWhen I looked for a tutorial how to setup a Google Firebase project using react.js, I could not find many tutorials. Maybe because it is trivial if you are familiar with Firebase and/or react.js.Basically, what you need to do to setup Google Firebase and react.js are just two steps:      Create a react.js application using    create-react-ap nameOfApp        Initialize a firebase project within the folder of your react.js application with some specific settings    Here, I assume that you have node.js already installed on your machine. I am running everything on macOS.  In the following I will describe the two steps in more detail.1. Setting up a react.js projectI found the following tutorial really helpful to create a first react.js app. Thus, instead of repeating it here, I recommend to follow this guide.However, at some point I had an issue and had to install:npm install --save react-router-domBut then everything was fine.Important commands:      npm start for starting your app on your local machine        npm run build to build optimized code which will be put in the folder build  2. Setting up Google Firebase projectThe following steps have to be executed to setup a Google Firebase project. The source of this description can be found here:https://medium.com/@larrysigo/hosting-your-react-app-with-firebase-hosting-add1fa08c214First you gave to install the firebase-tools and initialize firebase in your project.Install firebase tools by npm install -g firebase-tools which install firebase globally so it can be used in the ternimal.Second you have to initialize the firebase project in your project folder. Navigate there in your terminal and enter the command firebase login, then login and run the command firebase init`.Follow the steps on the screen:  Select the Firebase features you want to use. Here, I chose Database, Hosting and Cloud functions.  Firebase command-line interface will pull up your list of Firebase projects, where you can then choose the corresponding project using the up and down keys. Here all projects created in the frírebase online frontend will be listed.  Keep the default for the Database Rules file name and just press enter.  Pay attention to the question about public directory, which is the directory that will be deployed and served by Firebase. In our case it is build, which is the folder where our production build is located. Type build and proceed. If you make a istake here, you can change the public directory in the file firebase.json  Firebase will ask you if you want the app to be configured as a single-page app. By default it is “no” — in our case, we could really benefit from the configuration, so we’ll type “y” and press enter. Later on you’ll be able to use react-router and the URLs will just work.  Firebase will warn us that we already have “build/index.html,” which we don’t want to be overwritten. Type “n” and press enter to keep our own “index.html,” generated by our build process earlier.Further material:  Alternative/similar guide, I did not try yet: https://www.youtube.com/watch?v=mwNATxfUsgI",
      "url": "/logbook/report/2017/08/26/Setting-up-a-web-app-project-using-Google-Firebase-and-reactjs/",
      "author": "Christoph Molitor",
      "categories": "report"
    }
    ,
  

    "report-2017-08-24-mein-erster-blogeintrag": {
      "title": "Mein erster Blogeintrag",
      "content"	 : "Mein erster BlogeintragHier in diesem Blog werde ich über verschiedene technische Themen berichten, mit denen ich mich gerade beschäftige. Die Berichte dienen hauptsächlich zu meiner eigenen Dokumentation und können vielleicht auch für jemand anderen hilfreich sein.",
      "url": "/logbook/report/2017/08/24/Mein-erster-Blogeintrag/",
      "author": "Christoph Molitor",
      "categories": "report"
    }
    
  

  
    
  
    
  
    
  
    
  
    
  
    
  
    
  
    
  
    
  
    
  
    
  
}